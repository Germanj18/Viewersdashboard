"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/youtube-scraper/route";
exports.ids = ["app/api/youtube-scraper/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fyoutube-scraper%2Froute&page=%2Fapi%2Fyoutube-scraper%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fyoutube-scraper%2Froute.ts&appDir=C%3A%5CUsers%5CGerman%5CDesktop%5CDashboard%20Viewers-%20LaCasa%5Cyoutube-viewers-lacasa%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CGerman%5CDesktop%5CDashboard%20Viewers-%20LaCasa%5Cyoutube-viewers-lacasa&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fyoutube-scraper%2Froute&page=%2Fapi%2Fyoutube-scraper%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fyoutube-scraper%2Froute.ts&appDir=C%3A%5CUsers%5CGerman%5CDesktop%5CDashboard%20Viewers-%20LaCasa%5Cyoutube-viewers-lacasa%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CGerman%5CDesktop%5CDashboard%20Viewers-%20LaCasa%5Cyoutube-viewers-lacasa&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_German_Desktop_Dashboard_Viewers_LaCasa_youtube_viewers_lacasa_src_app_api_youtube_scraper_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/youtube-scraper/route.ts */ \"(rsc)/./src/app/api/youtube-scraper/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/youtube-scraper/route\",\n        pathname: \"/api/youtube-scraper\",\n        filename: \"route\",\n        bundlePath: \"app/api/youtube-scraper/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\api\\\\youtube-scraper\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_German_Desktop_Dashboard_Viewers_LaCasa_youtube_viewers_lacasa_src_app_api_youtube_scraper_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/youtube-scraper/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ5b3V0dWJlLXNjcmFwZXIlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnlvdXR1YmUtc2NyYXBlciUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnlvdXR1YmUtc2NyYXBlciUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNHZXJtYW4lNUNEZXNrdG9wJTVDRGFzaGJvYXJkJTIwVmlld2Vycy0lMjBMYUNhc2ElNUN5b3V0dWJlLXZpZXdlcnMtbGFjYXNhJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNHZXJtYW4lNUNEZXNrdG9wJTVDRGFzaGJvYXJkJTIwVmlld2Vycy0lMjBMYUNhc2ElNUN5b3V0dWJlLXZpZXdlcnMtbGFjYXNhJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN1RTtBQUNwSjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3lvdXR1YmUtdmlld2Vycy1sYWNhc2EvPzlkMWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcR2VybWFuXFxcXERlc2t0b3BcXFxcRGFzaGJvYXJkIFZpZXdlcnMtIExhQ2FzYVxcXFx5b3V0dWJlLXZpZXdlcnMtbGFjYXNhXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHlvdXR1YmUtc2NyYXBlclxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkveW91dHViZS1zY3JhcGVyL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkveW91dHViZS1zY3JhcGVyXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS95b3V0dWJlLXNjcmFwZXIvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxHZXJtYW5cXFxcRGVza3RvcFxcXFxEYXNoYm9hcmQgVmlld2Vycy0gTGFDYXNhXFxcXHlvdXR1YmUtdmlld2Vycy1sYWNhc2FcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxceW91dHViZS1zY3JhcGVyXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS95b3V0dWJlLXNjcmFwZXIvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fyoutube-scraper%2Froute&page=%2Fapi%2Fyoutube-scraper%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fyoutube-scraper%2Froute.ts&appDir=C%3A%5CUsers%5CGerman%5CDesktop%5CDashboard%20Viewers-%20LaCasa%5Cyoutube-viewers-lacasa%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CGerman%5CDesktop%5CDashboard%20Viewers-%20LaCasa%5Cyoutube-viewers-lacasa&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/youtube-scraper/route.ts":
/*!**********************************************!*\
  !*** ./src/app/api/youtube-scraper/route.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\nasync function POST(request) {\n    try {\n        const { url, checkRedirects, detectLiveStream } = await request.json();\n        if (!url) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                status: \"error\",\n                message: \"URL de YouTube requerida\",\n                viewers: 0,\n                isLive: false,\n                title: \"\",\n                timestamp: new Date().toISOString(),\n                url: \"\"\n            }, {\n                status: 400\n            });\n        }\n        // Validar que sea una URL de YouTube\n        const youtubeRegex = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.be)\\/.+$/;\n        if (!youtubeRegex.test(url)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                status: \"error\",\n                message: \"URL de YouTube inv\\xe1lida\",\n                viewers: 0,\n                isLive: false,\n                title: \"\",\n                timestamp: new Date().toISOString(),\n                url\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"\\uD83D\\uDD0D Iniciando scraping de YouTube:\", url);\n        // Si es detección de stream en vivo desde canal\n        if (detectLiveStream) {\n            return await detectLiveStreamFromChannel(url);\n        }\n        // Si es verificación de redirecciones\n        if (checkRedirects) {\n            return await checkUrlRedirects(url);\n        }\n        // Hacer request a YouTube con headers que simulan navegador\n        const response = await fetch(url, {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n                \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                \"Accept-Language\": \"es-ES,es;q=0.9,en;q=0.8\",\n                \"Accept-Encoding\": \"gzip, deflate, br\",\n                \"Connection\": \"keep-alive\",\n                \"Upgrade-Insecure-Requests\": \"1\",\n                \"Cache-Control\": \"no-cache\"\n            },\n            method: \"GET\"\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        const html = await response.text();\n        // Extraer información del HTML\n        const result = extractYouTubeData(html, url);\n        console.log(\"✅ Scraping completado:\", result);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error(\"❌ Error en scraping de YouTube:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: \"error\",\n            message: error instanceof Error ? error.message : \"Error desconocido\",\n            viewers: 0,\n            isLive: false,\n            title: \"\",\n            timestamp: new Date().toISOString(),\n            url: \"\"\n        }, {\n            status: 500\n        });\n    }\n}\nfunction extractYouTubeData(html, url) {\n    try {\n        // Extraer título del video\n        let title = \"\";\n        const titleMatch = html.match(/<title[^>]*>([^<]+)<\\/title>/i);\n        if (titleMatch) {\n            title = titleMatch[1].replace(\" - YouTube\", \"\").trim();\n        }\n        // Buscar indicadores de stream en vivo\n        const liveIndicators = [\n            /watching now/i,\n            /viewers watching/i,\n            /en directo/i,\n            /live now/i,\n            /\"isLiveContent\":true/i,\n            /\"isLive\":true/i\n        ];\n        const isLive = liveIndicators.some((pattern)=>pattern.test(html));\n        // Extraer número de viewers con múltiples patrones\n        let viewers = 0;\n        if (isLive) {\n            // Patrones para viewers en vivo\n            const viewerPatterns = [\n                /\"viewCount\":{\"videoViewCountRenderer\":{\"viewCount\":{\"simpleText\":\"([^\"]+)\"/,\n                /\"concurrentViewers\":\"([^\"]+)\"/,\n                /\"watching now\"/i,\n                /(\\d+(?:,\\d+)*)\\s*watching/i,\n                /(\\d+(?:,\\d+)*)\\s*viewers?/i,\n                /(\\d+(?:\\.\\d+)?[KMB]?)\\s*watching/i,\n                /(\\d+(?:\\.\\d+)?[KMB]?)\\s*viewers?/i\n            ];\n            for (const pattern of viewerPatterns){\n                const match = html.match(pattern);\n                if (match) {\n                    let viewerText = match[1];\n                    viewers = parseViewerCount(viewerText);\n                    if (viewers > 0) {\n                        console.log(`� Viewers encontrados con patrón: ${viewerText} → ${viewers}`);\n                        break;\n                    }\n                }\n            }\n            // Buscar en JSON embebido\n            if (viewers === 0) {\n                const jsonMatches = html.match(/var ytInitialData = ({.*?});/);\n                if (jsonMatches) {\n                    try {\n                        const data = JSON.parse(jsonMatches[1]);\n                        viewers = findViewersInObject(data);\n                    } catch (e) {\n                        console.warn(\"Error parseando ytInitialData:\", e);\n                    }\n                }\n            }\n        } else {\n            // Para videos no en vivo, buscar views totales\n            const viewPatterns = [\n                /(\\d+(?:,\\d+)*)\\s*views?/i,\n                /(\\d+(?:\\.\\d+)?[KMB]?)\\s*views?/i,\n                /\"viewCount\":\"([^\"]+)\"/\n            ];\n            for (const pattern of viewPatterns){\n                const match = html.match(pattern);\n                if (match) {\n                    viewers = parseViewerCount(match[1]);\n                    if (viewers > 0) break;\n                }\n            }\n        }\n        return {\n            viewers,\n            isLive,\n            title,\n            status: \"success\",\n            timestamp: new Date().toISOString(),\n            url\n        };\n    } catch (error) {\n        console.error(\"Error extrayendo datos:\", error);\n        return {\n            viewers: 0,\n            isLive: false,\n            title: \"\",\n            status: \"error\",\n            message: \"Error procesando respuesta de YouTube\",\n            timestamp: new Date().toISOString(),\n            url\n        };\n    }\n}\nfunction findViewersInObject(obj) {\n    if (!obj || typeof obj !== \"object\") return 0;\n    const keys = [\n        \"concurrentViewers\",\n        \"viewCount\",\n        \"watching\",\n        \"viewers\"\n    ];\n    for (const key of keys){\n        if (obj[key]) {\n            const value = typeof obj[key] === \"object\" ? obj[key].simpleText || obj[key].runs?.[0]?.text : obj[key];\n            if (value) {\n                const parsed = parseViewerCount(value.toString());\n                if (parsed > 0) return parsed;\n            }\n        }\n    }\n    // Búsqueda recursiva\n    for (const value of Object.values(obj)){\n        if (typeof value === \"object\" && value !== null) {\n            const result = findViewersInObject(value);\n            if (result > 0) return result;\n        }\n    }\n    return 0;\n}\nfunction parseViewerCount(text) {\n    if (!text) return 0;\n    // Limpiar texto\n    text = text.replace(/[^\\d,.KMB]/gi, \"\");\n    // Manejar notación con K, M, B\n    const multipliers = {\n        \"K\": 1000,\n        \"M\": 1000000,\n        \"B\": 1000000000\n    };\n    const match = text.match(/^([\\d,.]+)([KMB])?$/i);\n    if (match) {\n        let number = parseFloat(match[1].replace(/,/g, \"\"));\n        const suffix = match[2]?.toUpperCase();\n        if (suffix && multipliers[suffix]) {\n            number *= multipliers[suffix];\n        }\n        return Math.round(number);\n    }\n    // Fallback: solo números\n    const numMatch = text.match(/[\\d,]+/);\n    if (numMatch) {\n        return parseInt(numMatch[0].replace(/,/g, \"\"), 10) || 0;\n    }\n    return 0;\n}\n// Función para detectar streams en vivo desde la página del canal\nasync function detectLiveStreamFromChannel(channelUrl) {\n    try {\n        console.log(\"\\uD83D\\uDD0D Detectando stream en vivo desde canal:\", channelUrl);\n        const response = await fetch(channelUrl, {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n                \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                \"Accept-Language\": \"es-ES,es;q=0.9,en;q=0.8\",\n                \"Accept-Encoding\": \"gzip, deflate, br\",\n                \"Connection\": \"keep-alive\",\n                \"Upgrade-Insecure-Requests\": \"1\",\n                \"Cache-Control\": \"no-cache\"\n            },\n            method: \"GET\"\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        const html = await response.text();\n        // Buscar enlaces de stream en vivo\n        const liveStreamPatterns = [\n            /\\/watch\\?v=([a-zA-Z0-9_-]{11})[^\"]*\"[^>]*>.*?(LIVE|EN DIRECTO|STREAMING)/gi,\n            /\\/watch\\?v=([a-zA-Z0-9_-]{11})[^\"]*\"[^>]*class=\"[^\"]*live[^\"]*\"/gi,\n            /\"url\":\"\\\\?\\/watch\\?v=([a-zA-Z0-9_-]{11})[^\"]*\"[^}]*\"isLiveContent\":true/gi\n        ];\n        for (const pattern of liveStreamPatterns){\n            const matches = Array.from(html.matchAll(pattern));\n            for (const match of matches){\n                if (match[1]) {\n                    const videoId = match[1];\n                    const liveStreamUrl = `https://www.youtube.com/watch?v=${videoId}`;\n                    console.log(\"✅ Stream en vivo encontrado:\", liveStreamUrl);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        status: \"success\",\n                        liveStreamUrl,\n                        message: \"Stream en vivo detectado\",\n                        timestamp: new Date().toISOString()\n                    });\n                }\n            }\n        }\n        // Si no se encontró stream específico, buscar indicadores generales\n        const liveIndicators = [\n            /watching now/i,\n            /viewers watching/i,\n            /en directo/i,\n            /live/i,\n            /streaming/i\n        ];\n        let hasLiveContent = false;\n        for (const indicator of liveIndicators){\n            if (indicator.test(html)) {\n                hasLiveContent = true;\n                break;\n            }\n        }\n        if (hasLiveContent) {\n            // Buscar cualquier video en la página principal\n            const videoMatch = html.match(/\\/watch\\?v=([a-zA-Z0-9_-]{11})/);\n            if (videoMatch) {\n                const liveStreamUrl = `https://www.youtube.com/watch?v=${videoMatch[1]}`;\n                console.log(\"⚠️ Posible stream detectado (verificar):\", liveStreamUrl);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    status: \"success\",\n                    liveStreamUrl,\n                    message: \"Posible stream detectado (requiere verificaci\\xf3n)\",\n                    timestamp: new Date().toISOString()\n                });\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: \"error\",\n            message: \"No se detect\\xf3 stream en vivo\",\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"❌ Error detectando stream desde canal:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: \"error\",\n            message: error instanceof Error ? error.message : \"Error desconocido\",\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n// Función para verificar redirecciones de URL\nasync function checkUrlRedirects(originalUrl) {\n    try {\n        console.log(\"\\uD83D\\uDD04 Verificando redirecciones para:\", originalUrl);\n        const response = await fetch(originalUrl, {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n                \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                \"Accept-Language\": \"es-ES,es;q=0.9,en;q=0.8\",\n                \"Accept-Encoding\": \"gzip, deflate, br\",\n                \"Connection\": \"keep-alive\",\n                \"Upgrade-Insecure-Requests\": \"1\",\n                \"Cache-Control\": \"no-cache\"\n            },\n            method: \"GET\",\n            redirect: \"follow\" // Seguir redirecciones automáticamente\n        });\n        const finalUrl = response.url;\n        if (finalUrl !== originalUrl) {\n            console.log(\"✅ Redirecci\\xf3n detectada:\", originalUrl, \"->\", finalUrl);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                status: \"success\",\n                redirectedUrl: finalUrl,\n                message: \"Redirecci\\xf3n detectada\",\n                timestamp: new Date().toISOString()\n            });\n        }\n        // Si no hay redirección HTTP, buscar redirecciones en JavaScript/Meta tags\n        const html = await response.text();\n        // Buscar meta refresh\n        const metaRefreshMatch = html.match(/<meta[^>]*http-equiv=[\"']refresh[\"'][^>]*content=[\"'][^\"']*url=([^\"']+)[\"']/i);\n        if (metaRefreshMatch) {\n            const redirectUrl = metaRefreshMatch[1];\n            if (redirectUrl && redirectUrl !== originalUrl) {\n                console.log(\"✅ Redirecci\\xf3n meta refresh detectada:\", redirectUrl);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    status: \"success\",\n                    redirectedUrl: redirectUrl,\n                    message: \"Redirecci\\xf3n meta refresh detectada\",\n                    timestamp: new Date().toISOString()\n                });\n            }\n        }\n        // Buscar window.location redirects\n        const jsRedirectMatch = html.match(/window\\.location(?:\\.href)?\\s*=\\s*[\"']([^\"']+)[\"']/i);\n        if (jsRedirectMatch) {\n            const redirectUrl = jsRedirectMatch[1];\n            if (redirectUrl && redirectUrl !== originalUrl) {\n                console.log(\"✅ Redirecci\\xf3n JavaScript detectada:\", redirectUrl);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    status: \"success\",\n                    redirectedUrl: redirectUrl,\n                    message: \"Redirecci\\xf3n JavaScript detectada\",\n                    timestamp: new Date().toISOString()\n                });\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: \"success\",\n            message: \"No se detectaron redirecciones\",\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"❌ Error verificando redirecciones:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: \"error\",\n            message: error instanceof Error ? error.message : \"Error desconocido\",\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/youtube-scraper/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fyoutube-scraper%2Froute&page=%2Fapi%2Fyoutube-scraper%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fyoutube-scraper%2Froute.ts&appDir=C%3A%5CUsers%5CGerman%5CDesktop%5CDashboard%20Viewers-%20LaCasa%5Cyoutube-viewers-lacasa%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CGerman%5CDesktop%5CDashboard%20Viewers-%20LaCasa%5Cyoutube-viewers-lacasa&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();