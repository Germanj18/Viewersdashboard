"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./src/app/components/Block.tsx":
/*!**************************************!*\
  !*** ./src/app/components/Block.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ThemeContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ThemeContext */ \"(app-pages-browser)/./src/app/ThemeContext.tsx\");\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n\nvar _s = $RefreshSig$();\n\n\n\nconst Block = (param)=>{\n    let { initialData, link, onTotalViewersChange, blockId, onShowWarning, onShowEditModal } = param;\n    _s();\n    const { theme } = (0,_ThemeContext__WEBPACK_IMPORTED_MODULE_2__.useTheme)();\n    // Función para cargar estado desde localStorage\n    const loadBlockState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const savedState = localStorage.getItem(\"blockState_\".concat(blockId));\n        if (savedState) {\n            try {\n                const parsed = JSON.parse(savedState);\n                // Limpiar datos muy antiguos (más de 7 días)\n                if (parsed.lastSaved) {\n                    const lastSavedDate = new Date(parsed.lastSaved);\n                    const now = new Date();\n                    const daysDiff = (now.getTime() - lastSavedDate.getTime()) / (1000 * 3600 * 24);\n                    if (daysDiff > 7) {\n                        localStorage.removeItem(\"blockState_\".concat(blockId));\n                        return null;\n                    }\n                }\n                return parsed;\n            } catch (error) {\n                console.error(\"Error parsing saved block state:\", error);\n                localStorage.removeItem(\"blockState_\".concat(blockId));\n                return null;\n            }\n        }\n        return null;\n    }, [\n        blockId\n    ]);\n    // Estado local del bloque con carga desde localStorage\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>{\n        const savedState = loadBlockState();\n        return (savedState === null || savedState === void 0 ? void 0 : savedState.status) || [];\n    });\n    const [intervalId, setIntervalId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isPaused, setIsPaused] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentOperation, setCurrentOperation] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>{\n        const savedState = loadBlockState();\n        return (savedState === null || savedState === void 0 ? void 0 : savedState.currentOperation) || 0;\n    });\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>{\n        const savedState = loadBlockState();\n        const savedStateValue = (savedState === null || savedState === void 0 ? void 0 : savedState.state) || \"idle\";\n        // Si estaba 'running' antes de recargar, cambiar a 'paused' para evitar problemas\n        return savedStateValue === \"running\" ? \"paused\" : savedStateValue;\n    });\n    const [totalViewers, setTotalViewers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>{\n        const savedState = loadBlockState();\n        return (savedState === null || savedState === void 0 ? void 0 : savedState.totalViewers) || 0;\n    });\n    const [blockData, setBlockData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>{\n        const savedState = loadBlockState();\n        const data = (savedState === null || savedState === void 0 ? void 0 : savedState.blockData) || initialData;\n        // Asegurar que intervalMinutes tenga un valor por defecto\n        if (!data.intervalMinutes) {\n            data.intervalMinutes = 2; // 2 minutos por defecto\n        }\n        return data;\n    });\n    // Función para guardar estado en localStorage\n    const saveBlockState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const stateToSave = {\n            status,\n            currentOperation,\n            state,\n            totalViewers,\n            blockData,\n            lastSaved: new Date().toISOString()\n        };\n        localStorage.setItem(\"blockState_\".concat(blockId), JSON.stringify(stateToSave));\n    }, [\n        blockId,\n        status,\n        currentOperation,\n        state,\n        totalViewers,\n        blockData\n    ]);\n    // Guardar estado cada vez que cambie algún valor importante\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        saveBlockState();\n    }, [\n        status,\n        currentOperation,\n        state,\n        totalViewers,\n        blockData,\n        saveBlockState\n    ]);\n    // Refs para mantener valores actualizados en el intervalo\n    const intervalRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastReportedViewers = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(state);\n    const currentOperationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(currentOperation);\n    const blockDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(blockData);\n    const statusRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(status);\n    const totalViewersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(totalViewers);\n    // Actualizar refs cuando cambian los estados\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        stateRef.current = state;\n    }, [\n        state\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        currentOperationRef.current = currentOperation;\n    }, [\n        currentOperation\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        blockDataRef.current = blockData;\n    }, [\n        blockData\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        statusRef.current = status;\n    }, [\n        status\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        totalViewersRef.current = totalViewers;\n    }, [\n        totalViewers\n    ]);\n    // Efecto para auto-start\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (blockData.autoStart && blockData.startTime && state === \"idle\") {\n            const [hours, minutes] = blockData.startTime.split(\":\").map(Number);\n            const now = new Date();\n            const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hours, minutes, 0, 0);\n            const delay = start.getTime() - now.getTime();\n            if (delay > 0) {\n                const timeoutId = setTimeout(()=>startBlock(), delay);\n                return ()=>clearTimeout(timeoutId);\n            }\n        }\n    }, [\n        blockData.autoStart,\n        blockData.startTime,\n        state\n    ]);\n    // Efecto para notificar cambios en totalViewers (optimizado)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (lastReportedViewers.current !== totalViewers) {\n            onTotalViewersChange(blockId, totalViewers);\n            lastReportedViewers.current = totalViewers;\n        }\n    }, [\n        totalViewers,\n        blockId,\n        onTotalViewersChange\n    ]);\n    // Cleanup al desmontar y antes de cerrar la ventana\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleBeforeUnload = ()=>{\n            if (intervalRef.current) {\n                clearInterval(intervalRef.current);\n            }\n            // Guardar estado final antes de cerrar\n            const finalState = {\n                status: statusRef.current,\n                currentOperation: currentOperationRef.current,\n                state: stateRef.current === \"running\" ? \"paused\" : stateRef.current,\n                totalViewers: totalViewersRef.current,\n                blockData: blockDataRef.current,\n                lastSaved: new Date().toISOString()\n            };\n            localStorage.setItem(\"blockState_\".concat(blockId), JSON.stringify(finalState));\n        };\n        window.addEventListener(\"beforeunload\", handleBeforeUnload);\n        return ()=>{\n            if (intervalRef.current) {\n                clearInterval(intervalRef.current);\n            }\n            window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n        };\n    }, [\n        blockId\n    ]);\n    const getServiceDuration = (serviceId)=>{\n        switch(serviceId){\n            case 336:\n                return 120;\n            case 337:\n                return 150;\n            case 334:\n                return 60;\n            case 335:\n                return 90;\n            case 338:\n                return 180;\n            case 459:\n                return 240;\n            case 460:\n                return 360;\n            case 657:\n                return 480;\n            default:\n                return 0;\n        }\n    };\n    const generateExcel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        // Crear el resumen para el Excel\n        const currentStatus = statusRef.current;\n        const currentBlockData = blockDataRef.current;\n        const summary = currentStatus.map((statusItem)=>{\n            var _statusItem_details_res, _statusItem_details;\n            return {\n                \"Estado\": statusItem.status,\n                \"Mensaje\": statusItem.message,\n                \"Timestamp\": statusItem.timestamp,\n                \"Order ID\": statusItem.orderId,\n                \"Order Status\": statusItem.orderStatus,\n                \"Duraci\\xf3n (minutos)\": statusItem.duration,\n                \"Cantidad de Viewers\": statusItem.count,\n                \"Costo de la Operaci\\xf3n\": ((_statusItem_details = statusItem.details) === null || _statusItem_details === void 0 ? void 0 : (_statusItem_details_res = _statusItem_details.res) === null || _statusItem_details_res === void 0 ? void 0 : _statusItem_details_res.sum) || 0,\n                ...statusItem.details\n            };\n        });\n        // Generar intervalos de tiempo desde las 10:25 AM hasta las 23:00 PM\n        const startTime = new Date(\"1970-01-01T10:25:00Z\");\n        const endTime = new Date(\"1970-01-01T23:00:00Z\");\n        const timeIntervals = [];\n        let currentTime = new Date(startTime);\n        while(currentTime <= endTime){\n            timeIntervals.push({\n                Hora: currentTime.toISOString().substr(11, 5)\n            });\n            currentTime = new Date(currentTime.getTime() + 60000);\n        }\n        const costRow = {\n            Hora: \"Costo\"\n        };\n        currentStatus.forEach((statusItem)=>{\n            if (statusItem.status === \"success\" && statusItem.count && statusItem.timestamp) {\n                // Intentar parsear el timestamp de manera más robusta\n                let startTimeString;\n                try {\n                    // Si el timestamp está en formato HH:MM:SS, extraer solo HH:MM\n                    const timeMatch = statusItem.timestamp.match(/(\\d{1,2}):(\\d{2}):(\\d{2})/);\n                    if (timeMatch) {\n                        const hours = timeMatch[1].padStart(2, \"0\");\n                        const minutes = timeMatch[2];\n                        startTimeString = \"\".concat(hours, \":\").concat(minutes);\n                    } else {\n                        // Si no se puede parsear, usar un valor por defecto\n                        console.warn(\"No se pudo parsear el timestamp:\", statusItem.timestamp);\n                        startTimeString = \"10:25\"; // Valor por defecto\n                    }\n                } catch (error) {\n                    console.error(\"Error parseando timestamp:\", statusItem.timestamp, error);\n                    startTimeString = \"10:25\"; // Valor por defecto\n                }\n                const duration = statusItem.duration || 0;\n                const orderIdColumn = \"Operaci\\xf3n \".concat(statusItem.orderId);\n                if (!(orderIdColumn in costRow)) {\n                    var _statusItem_details_res, _statusItem_details;\n                    costRow[orderIdColumn] = ((_statusItem_details = statusItem.details) === null || _statusItem_details === void 0 ? void 0 : (_statusItem_details_res = _statusItem_details.res) === null || _statusItem_details_res === void 0 ? void 0 : _statusItem_details_res.sum) || 0;\n                }\n                timeIntervals.forEach((interval)=>{\n                    if (!(orderIdColumn in interval)) {\n                        interval[orderIdColumn] = \"\";\n                    }\n                });\n                const startIndex = timeIntervals.findIndex((entry)=>entry.Hora === startTimeString);\n                if (startIndex !== -1) {\n                    for(let i = 0; i < duration && startIndex + i < timeIntervals.length; i++){\n                        timeIntervals[startIndex + i][orderIdColumn] = statusItem.count;\n                    }\n                }\n            }\n        });\n        const allRows = [\n            costRow,\n            ...timeIntervals\n        ];\n        const wsSummary = xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.json_to_sheet(summary);\n        const wsViewers = xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.json_to_sheet(allRows);\n        const wb = xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.book_new();\n        xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.book_append_sheet(wb, wsSummary, \"Resumen de Operaciones\");\n        xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.book_append_sheet(wb, wsViewers, \"Viewers por Minuto\");\n        xlsx__WEBPACK_IMPORTED_MODULE_3__.writeFile(wb, \"\".concat(currentBlockData.title, \".xlsx\"));\n    }, []);\n    const handleApiCall = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        // Verificar condiciones usando refs para valores actuales\n        if (!link || stateRef.current !== \"running\") {\n            console.log(\"\".concat(blockDataRef.current.title, \": No ejecutando API call. Link: \").concat(link, \", State: \").concat(stateRef.current));\n            return;\n        }\n        try {\n            var _data_res, _data_res1;\n            const currentBlockData = blockDataRef.current;\n            const currentOpNum = currentOperationRef.current;\n            const { count, decrement, serviceId, operationType } = currentBlockData;\n            // Calcula la cantidad para la operación actual\n            const operationCount = operationType === \"add\" ? count + (decrement || 0) * currentOpNum : count - (decrement || 0) * currentOpNum;\n            console.log(\"\".concat(currentBlockData.title, \": Iniciando operaci\\xf3n \").concat(currentOpNum + 1, \" con \").concat(operationCount, \" viewers\"));\n            const response = await fetch(\"/api/proxy?service_id=\".concat(serviceId, \"&count=\").concat(operationCount, \"&link=\").concat(link));\n            const data = await response.json();\n            // Generar timestamp en formato consistente HH:MM:SS\n            const now = new Date();\n            const timestamp = now.toTimeString().split(\" \")[0]; // Formato HH:MM:SS\n            const duration = getServiceDuration(serviceId);\n            // Calcular hora de finalización estimada\n            const startTime = now.toISOString();\n            const estimatedEndTime = new Date(now.getTime() + duration * 60 * 1000).toISOString();\n            console.log(\"\".concat(currentBlockData.title, \", Operation \").concat(currentOpNum + 1, \":\"), data);\n            const newStatus = {\n                status: data.error ? \"error\" : \"success\",\n                message: data.error ? \"Error en la operaci\\xf3n\" : \"Operaci\\xf3n exitosa\",\n                details: data,\n                timestamp,\n                orderId: (_data_res = data.res) === null || _data_res === void 0 ? void 0 : _data_res.order_id,\n                duration,\n                count: operationCount,\n                serviceId,\n                cost: ((_data_res1 = data.res) === null || _data_res1 === void 0 ? void 0 : _data_res1.sum) || 0,\n                startTime,\n                estimatedEndTime\n            };\n            setStatus((prev)=>[\n                    ...prev,\n                    newStatus\n                ]);\n            // Guardar en historial global inmediatamente\n            saveToGlobalHistory(newStatus);\n            // Actualizar el total de espectadores\n            if (newStatus.status === \"success\") {\n                setTotalViewers((prev)=>prev + operationCount);\n            }\n            const nextOperation = currentOpNum + 1;\n            setCurrentOperation(nextOperation);\n            if (nextOperation >= currentBlockData.totalOperations) {\n                if (intervalRef.current) {\n                    clearInterval(intervalRef.current);\n                    intervalRef.current = null;\n                    setIntervalId(null);\n                }\n                setState(\"completed\");\n                stateRef.current = \"completed\";\n                // Notificación de bloque completado\n                if ( true && \"Notification\" in window && Notification.permission === \"granted\") {\n                    new Notification(\"\\uD83C\\uDF89 \".concat(currentBlockData.title, \" Completado\"), {\n                        body: \"El bloque se ha completado exitosamente con \".concat(totalViewersRef.current, \" viewers totales\"),\n                        icon: \"/favicon.ico\"\n                    });\n                }\n                // Auto-generar Excel al completar\n                setTimeout(()=>generateExcel(), 1000);\n            }\n        } catch (error) {\n            console.error(\"\".concat(blockDataRef.current.title, \", Operation \").concat(currentOperationRef.current + 1, \":\"), error);\n            const now = new Date();\n            const newStatus = {\n                status: \"error\",\n                message: \"Error en la operaci\\xf3n\",\n                details: error,\n                timestamp: now.toTimeString().split(\" \")[0],\n                duration: 0,\n                cost: 0,\n                startTime: now.toISOString(),\n                estimatedEndTime: now.toISOString()\n            };\n            setStatus((prev)=>[\n                    ...prev,\n                    newStatus\n                ]);\n            // Guardar en historial global inmediatamente\n            saveToGlobalHistory(newStatus);\n            const nextOperation = currentOperationRef.current + 1;\n            setCurrentOperation(nextOperation);\n            if (nextOperation >= blockDataRef.current.totalOperations) {\n                if (intervalRef.current) {\n                    clearInterval(intervalRef.current);\n                    intervalRef.current = null;\n                    setIntervalId(null);\n                }\n                setState(\"completed\");\n                stateRef.current = \"completed\";\n                // Notificación de bloque completado (para casos de error también)\n                if ( true && \"Notification\" in window && Notification.permission === \"granted\") {\n                    new Notification(\"\\uD83C\\uDFC1 \".concat(blockDataRef.current.title, \" Finalizado\"), {\n                        body: \"El bloque ha finalizado (con errores) - Total viewers: \".concat(totalViewersRef.current),\n                        icon: \"/favicon.ico\"\n                    });\n                }\n                setTimeout(()=>generateExcel(), 1000);\n            }\n        }\n    }, [\n        link,\n        generateExcel\n    ]);\n    const startBlock = ()=>{\n        if (state === \"running\") return;\n        setIsPaused(false);\n        setState(\"running\");\n        // Actualizar el ref inmediatamente para que handleApiCall lo detecte\n        stateRef.current = \"running\";\n        // Enviar la primera operación inmediatamente\n        handleApiCall();\n        // Configurar el intervalo para las siguientes operaciones usando el intervalo personalizado\n        const intervalMs = (blockDataRef.current.intervalMinutes || 2) * 60 * 1000; // Convertir minutos a millisegundos\n        const newIntervalId = setInterval(()=>handleApiCall(), intervalMs);\n        intervalRef.current = newIntervalId;\n        setIntervalId(newIntervalId);\n    };\n    const pauseBlock = ()=>{\n        if (intervalRef.current) {\n            clearInterval(intervalRef.current);\n            intervalRef.current = null;\n            setIntervalId(null);\n            setIsPaused(true);\n            setState(\"paused\");\n            // Actualizar el ref inmediatamente\n            stateRef.current = \"paused\";\n        }\n    };\n    const resumeBlock = ()=>{\n        setIsPaused(false);\n        setState(\"running\");\n        // Actualizar el ref inmediatamente\n        stateRef.current = \"running\";\n        // Llamar a la API inmediatamente después de reanudar\n        handleApiCall();\n        // Reiniciar el intervalo usando el intervalo personalizado\n        const intervalMs = (blockDataRef.current.intervalMinutes || 2) * 60 * 1000;\n        const newIntervalId = setInterval(handleApiCall, intervalMs);\n        intervalRef.current = newIntervalId;\n        setIntervalId(newIntervalId);\n    };\n    const finalizeBlock = ()=>{\n        if (intervalRef.current) {\n            clearInterval(intervalRef.current);\n            intervalRef.current = null;\n            setIntervalId(null);\n        }\n        if (state !== \"completed\") {\n            setState(\"completed\");\n            stateRef.current = \"completed\";\n            // Notificación de finalización manual\n            if ( true && \"Notification\" in window && Notification.permission === \"granted\") {\n                new Notification(\"\\uD83C\\uDFC1 \".concat(blockData.title, \" Finalizado Manualmente\"), {\n                    body: \"El bloque fue finalizado manualmente con \".concat(totalViewers, \" viewers totales\"),\n                    icon: \"/favicon.ico\"\n                });\n            }\n            generateExcel();\n        }\n        setBlockData((prev)=>({\n                ...prev,\n                autoStart: false\n            }));\n    };\n    const resetBlock = ()=>{\n        // CORRIGIDO: No guardamos las operaciones nuevamente porque ya fueron guardadas\n        // cuando se ejecutaron originalmente en handleApiCall (líneas 341 y 377)\n        // Registrar el reset del bloque con las operaciones que se van a perder\n        saveBlockReset();\n        if (intervalRef.current) {\n            clearInterval(intervalRef.current);\n            intervalRef.current = null;\n            setIntervalId(null);\n        }\n        setStatus([]);\n        setIsPaused(false);\n        setCurrentOperation(0);\n        setState(\"idle\");\n        stateRef.current = \"idle\";\n        setTotalViewers(0);\n        setBlockData((prev)=>({\n                ...prev,\n                autoStart: false,\n                startTime: \"\"\n            }));\n        // Limpiar estado guardado del localStorage\n        localStorage.removeItem(\"blockState_\".concat(blockId));\n    };\n    const handleEditModal = ()=>{\n        onShowEditModal(blockId, blockData);\n    };\n    // Función para actualizar blockData desde el componente padre\n    const updateBlockData = (newData)=>{\n        setBlockData(newData);\n    };\n    // Exponer funciones al componente padre mediante efectos\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        window[\"updateBlockData_\".concat(blockId)] = updateBlockData;\n        window[\"finalizeBlock_\".concat(blockId)] = finalizeBlock;\n        window[\"resetBlock_\".concat(blockId)] = resetBlock;\n        return ()=>{\n            delete window[\"updateBlockData_\".concat(blockId)];\n            delete window[\"finalizeBlock_\".concat(blockId)];\n            delete window[\"resetBlock_\".concat(blockId)];\n        };\n    }, [\n        blockId\n    ]);\n    // Función para guardar operación en historial permanente\n    const saveToGlobalHistory = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((operation)=>{\n        const globalHistoryKey = \"globalOperationsHistory\";\n        const existingHistory = localStorage.getItem(globalHistoryKey);\n        let history = [];\n        if (existingHistory) {\n            try {\n                history = JSON.parse(existingHistory);\n            } catch (error) {\n                console.error(\"Error parsing global history:\", error);\n                history = [];\n            }\n        }\n        const historicalOperation = {\n            ...operation,\n            blockId,\n            blockTitle: blockData.title,\n            savedAt: new Date().toISOString()\n        };\n        history.push(historicalOperation);\n        // Mantener solo las últimas 1000 operaciones para evitar problemas de memoria\n        if (history.length > 1000) {\n            history = history.slice(-1000);\n        }\n        localStorage.setItem(globalHistoryKey, JSON.stringify(history));\n    }, [\n        blockId,\n        blockData.title\n    ]);\n    // Función para registrar reset del bloque\n    const saveBlockReset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const resetHistoryKey = \"blockResetHistory\";\n        const existingResets = localStorage.getItem(resetHistoryKey);\n        let resets = [];\n        if (existingResets) {\n            try {\n                resets = JSON.parse(existingResets);\n            } catch (error) {\n                console.error(\"Error parsing reset history:\", error);\n                resets = [];\n            }\n        }\n        const resetRecord = {\n            blockId,\n            blockTitle: blockData.title,\n            resetAt: new Date().toISOString(),\n            operationsLost: status.length,\n            viewersLost: totalViewers\n        };\n        resets.push(resetRecord);\n        // Mantener solo los últimos 100 resets\n        if (resets.length > 100) {\n            resets = resets.slice(-100);\n        }\n        localStorage.setItem(resetHistoryKey, JSON.stringify(resets));\n    }, [\n        blockId,\n        blockData.title,\n        status.length,\n        totalViewers\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"block \".concat(theme),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                className: \"block-title\",\n                children: blockData.title\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                lineNumber: 617,\n                columnNumber: 7\n            }, undefined),\n            blockData.autoStart && blockData.startTime && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"auto-start-info\",\n                children: [\n                    \"⏰ Inicio autom\\xe1tico: \",\n                    blockData.startTime\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                lineNumber: 620,\n                columnNumber: 9\n            }, undefined),\n            (state === \"paused\" || state === \"completed\") && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: generateExcel,\n                className: \"download-icon\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"icon-download\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                    lineNumber: 627,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                lineNumber: 626,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"status\",\n                children: Array.from({\n                    length: blockData.totalOperations\n                }).map((_, statusIndex)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"status-item\",\n                        children: [\n                            \"Operaci\\xf3n \".concat(statusIndex + 1, \": \"),\n                            status[statusIndex] ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                children: [\n                                    status[statusIndex].status === \"success\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"status-success\",\n                                        children: \"✅\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                                        lineNumber: 638,\n                                        columnNumber: 19\n                                    }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"status-error\",\n                                        children: \"❌\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                                        lineNumber: 640,\n                                        columnNumber: 19\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"timestamp\",\n                                        children: status[statusIndex].timestamp\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                                        lineNumber: 642,\n                                        columnNumber: 17\n                                    }, undefined),\n                                    status[statusIndex].orderStatus && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"order-status\",\n                                        children: status[statusIndex].orderStatus\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                                        lineNumber: 644,\n                                        columnNumber: 19\n                                    }, undefined)\n                                ]\n                            }, void 0, true) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"status-pending\",\n                                children: \"⏳\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                                lineNumber: 648,\n                                columnNumber: 15\n                            }, undefined)\n                        ]\n                    }, statusIndex, true, {\n                        fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                        lineNumber: 633,\n                        columnNumber: 11\n                    }, undefined))\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                lineNumber: 631,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"block-controls\",\n                children: [\n                    state === \"idle\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: startBlock,\n                        className: \"start-button\",\n                        children: \"▶️ Iniciar\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                        lineNumber: 656,\n                        columnNumber: 11\n                    }, undefined),\n                    state === \"running\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: pauseBlock,\n                        className: \"pause-button\",\n                        children: \"⏸️ Pausar\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                        lineNumber: 662,\n                        columnNumber: 11\n                    }, undefined),\n                    state === \"paused\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: resumeBlock,\n                                className: \"resume-button\",\n                                children: \"▶️ Reanudar\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                                lineNumber: 669,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>onShowWarning(blockId, \"finalizar\"),\n                                className: \"finalize-button\",\n                                children: \"\\uD83C\\uDFC1 Finalizar\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                                lineNumber: 672,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>onShowWarning(blockId, \"reiniciar\"),\n                                className: \"reset-button\",\n                                children: \"\\uD83D\\uDD04 Reiniciar\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                                lineNumber: 675,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true),\n                    state === \"completed\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"completed-message\",\n                                children: \"✅ Bloque finalizado\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                                lineNumber: 683,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>onShowWarning(blockId, \"reiniciar\"),\n                                className: \"reset-button\",\n                                children: \"\\uD83D\\uDD04 Reiniciar\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                                lineNumber: 684,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: handleEditModal,\n                        className: \"edit-button\",\n                        children: \"✏️ Editar\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                        lineNumber: 691,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                lineNumber: 654,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"total-viewers\",\n                children: [\n                    \"\\uD83D\\uDC65 \",\n                    totalViewers\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n                lineNumber: 696,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\German\\\\Desktop\\\\Dashboard Viewers- LaCasa\\\\youtube-viewers-lacasa\\\\src\\\\app\\\\components\\\\Block.tsx\",\n        lineNumber: 616,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Block, \"HJupXQZux5V65CPIgcfAWLRZYRU=\", false, function() {\n    return [\n        _ThemeContext__WEBPACK_IMPORTED_MODULE_2__.useTheme\n    ];\n});\n_c = Block;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Block);\nvar _c;\n$RefreshReg$(_c, \"Block\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/components/Block.tsx\n"));

/***/ })

});